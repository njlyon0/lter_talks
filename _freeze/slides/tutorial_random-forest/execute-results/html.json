{
  "hash": "6b6d6732ed711b06492b2abaf85e3594",
  "result": {
    "markdown": "---\ntitle: \"Random Forest in R\"\nauthor: \"Nick J Lyon\"\nengine: knitr\ntitle-slide-attributes:\n  data-background-color: \"#222222\"\nformat: \n  revealjs: \n    slide-number: c\n    scrollable: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: hover\n    theme: [simple, slides_theme.scss]\n    reference-location: document\n---\n\n\n## Under Construction {background-color=\"#222222\"}\n\nSee original content [here](https://github.com/njlyon0/lyon-tutorial_random-forest)\n\n\n\n\n## Prepare {.smaller background-color=\"#222222\"}\n\n- First, you'll need to install and load a few {{< fa brands r-project >}} R packages\n    - While not technically necessary, the `librarian` package makes library management _much_ simpler\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install librarian (if you need to)\n# install.packages(\"librarian\")\n\n# Install (if not already present) and load needed libraries\nlibrarian::shelf(tidyverse, randomForest, permimp, vegan)\n```\n:::\n\n\n## Data Prep {.smaller background-color=\"#222222\"}\n\n\n\n\n\n Load some lichen species data\ndata(varespec)\n\n And some chemical predictor variables to go along with those species\ndata(varechem)\n\n Get just one of the lichen species to use as a response variable\nvarespec.v2 <- dplyr::select(varespec, Callvulg)\n\n Bind the response and predictors together\ndata.obj <- cbind(varechem, varespec.v2)\n\n Check it out\nhead(data.obj)\n\n## Random Forest {.smaller background-color=\"#222222\"}\n\n Run the random forest\nrf1 <- randomForest(Callvulg ~ .,\n                     The 'Y ~ .' format uses all other columns as predictors\n                     Makes formatting your data **crucial**\n                    data = data.obj,\n                    ntree = 1000,\n                     How many trees should be in the forest\n                    mtry = 2,\n                     mtry is  variables / node in tree\n                    na.action = na.omit,\n                    keep.forest = T,\n                    keep.inbag = T)\n\n## Variable Importance Plot {.smaller background-color=\"#222222\"}\n\n\n Create a variable importance plot\nrandomForest::varImpPlot(x = rf1,\n                         sort = T,\n                         n.var = (ncol(data.obj) - 1),\n                         main = \"Variable Importance\")\n\n## Conditional Permutation Importance {.smaller background-color=\"#222222\"}\n\n- See `permimp` [vignette](cran.r-project.org/web/packages/permimp/vignettes/permimp-package.html) for more details\n \n\n Let's implement conditional permutation\n   Should see a progress bar in the Console after you run the above\nrf1.hiCond <- permimp::permimp(object = rf1,\n                               conditional = T,\n                               threshold = 0.95,\n                               do_check = F)\n\n## CPI Plot {.smaller background-color=\"#222222\"}\n\n Plot distribution of importance\n   Note this step may take a minute or two\nplot(rf1.hiCond, type = \"box\", horizontal = T)\n\n\n## CPI V2 {.smaller background-color=\"#222222\"}\n\n Re-fit with a lower threshold\nrf1.loCond <- permimp::permimp(object = rf1,\n                               conditional = T,\n                               threshold = 0.55,\n                               do_check = F)\n\n Plot distribution of this importance\nplot(rf1.loCond, type = \"box\", horizontal = T)\n\n## CPI Comparison {.smaller background-color=\"#222222\"}\n\n Make objects of the importance values\nrf1.loCond.vals <- data.frame(rf1.loCond$values)\nrf1.hiCond.vals <- data.frame(rf1.hiCond$values)\n\n Side by side comparison of ranking\n   Ignore warning message\nrownames(rf1.loCond.vals)[order(-rf1.loCond.vals)]\nrownames(rf1.hiCond.vals)[order(-rf1.hiCond.vals)]\n\n## Exploratory Plotting {.smaller background-color=\"#222222\"}\n\n- This part is just for fun!\n\n\\\n\n\n::: {.cell}\n\n:::\n\n\n Graph the top few metrics\nggplot(data.obj, aes(y = Callvulg, x = pH)) +\n  geom_point(color = 'a6cee3') +\n  geom_smooth(method = 'lm', color = 'black') +\n  labs(x = \"pH\", y = \"Callvulg Cover (%)\") +\n  pref_theme\n\n\nggplot(data.obj, aes(y = Callvulg, x = Al)) +\n  geom_point(color = 'b2df8a') +\n  geom_smooth(method = 'lm', color = 'black') +\n  labs(x = \"Aluminum\", y = \"Callvulg Cover (%)\") +\n  pref_theme\n\n\nggplot(data.obj, aes(y = Callvulg, x = P)) +\n  geom_point(color = 'b2df8a') +\n  geom_smooth(method = 'lm', color = 'black') +\n  labs(x = \"Phosphorous\", y = \"Callvulg Cover (%)\") +\n  pref_theme\n\n\nggplot(data.obj, aes(y = Callvulg, x = Baresoil)) +\n  geom_point(color = '33a02c') +\n  geom_smooth(method = 'lm', color = 'black') +\n  labs(x = \"Baresoil (%)\", y = \"Callvulg Cover (%)\") +\n  pref_theme\n  \n  ",
    "supporting": [
      "tutorial_random-forest_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}