{
  "hash": "c0d19bbfd53f2e061a6b4d13e86780e5",
  "result": {
    "markdown": "---\ntitle: \"Random Forest in R\"\nauthor: \"Nick J Lyon\"\nengine: knitr\ntitle-slide-attributes:\n  data-background-color: \"#222222\"\nformat: \n  revealjs: \n    slide-number: c\n    scrollable: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: hover\n    theme: [simple, slides_theme.scss]\n    reference-location: document\n---\n\n\n## Prepare {.smaller background-color=\"#222222\"}\n\n- First, you'll need to install and load a few {{< fa brands r-project >}} R packages\n    - While not technically necessary, the `librarian` package makes library management _much_ simpler\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install librarian (if you need to)\n# install.packages(\"librarian\")\n\n# Install (if not already present) and load needed libraries\nlibrarian::shelf(tidyverse, randomForest, permimp, vegan)\n```\n:::\n\n\n## Lichen Data {.smaller background-color=\"#222222\"}\n\n- The `vegan` package includes some lichen community composition data we can use for exploratory purposes\n\n\\\n\n- We'll begin by loading that data (with some minor wrangling)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load vegan's lichen dataset & associated chemistry dataset\nutils::data(\"varespec\", package = 'vegan')\nutils::data(\"varechem\", package = 'vegan')\n\n# Get one lichen species' cover information separate\nlichen_sp <- dplyr::select(varespec, Callvulg)\n\n# Attach the single species to the chemistry data\nlichen_df <- cbind(lichen_sp, varechem)\n```\n:::\n\n\n## Data Structure {.smaller background-color=\"#222222\"}\n\n- This data object now has the following structure:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check lichen data structure\nstr(lichen_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t24 obs. of  15 variables:\n $ Callvulg: num  0.55 0.67 0.1 0 0 ...\n $ N       : num  19.8 13.4 20.2 20.6 23.8 22.8 26.6 24.2 29.8 28.1 ...\n $ P       : num  42.1 39.1 67.7 60.8 54.5 40.9 36.7 31 73.5 40.5 ...\n $ K       : num  140 167 207 234 181 ...\n $ Ca      : num  519 357 973 834 777 ...\n $ Mg      : num  90 70.7 209.1 127.2 125.8 ...\n $ S       : num  32.3 35.2 58.1 40.7 39.5 40.8 33.8 27.1 42.5 60.2 ...\n $ Al      : num  39 88.1 138 15.4 24.2 ...\n $ Fe      : num  40.9 39 35.4 4.4 3 ...\n $ Mn      : num  58.1 52.4 32.1 132 50.1 ...\n $ Zn      : num  4.5 5.4 16.8 10.7 6.6 9.1 7.4 5.2 9.3 9.1 ...\n $ Mo      : num  0.3 0.3 0.8 0.2 0.3 0.4 0.3 0.3 0.3 0.5 ...\n $ Baresoil: num  43.9 23.6 21.2 18.7 46 40.5 23 29.8 17.6 29.9 ...\n $ Humdepth: num  2.2 2.2 2 2.9 3 3.8 2.8 2 3 2.2 ...\n $ pH      : num  2.7 2.8 3 2.8 2.7 2.7 2.8 2.8 2.8 2.8 ...\n```\n:::\n:::\n\n\n## [Random Forest]{.edu-pink} {.smaller background-color=\"#222222\"}\n\n- Run the random forest with the function and package of the same name\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Actually do the random forest\nlich_rf <- randomForest::randomForest(Callvulg ~ ., data = lichen_df, \n                                      ntree = 1000, mtry = 2, \n                                      na.action = na.omit,\n                                      keep.forest = T, keep.inbag = T)\n```\n:::\n\n\n\\\n\n- Quick argument explanation\n    - 'Y ~ .' format of model means all other columns are (potential) predictors\n    - `ntree` is the number of trees in the forest\n    - `mtry` is the number of variables per node in the tree\n\n## Variable Importance Plot {.smaller background-color=\"#222222\"}\n\n- We can now generate a [variable importance plot]{.edu-gold} based on that random forest\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Create variable importance plot\nrandomForest::varImpPlot(x = lich_rf, sort = T,\n                         n.var = (ncol(lichen_df) - 1),\n                         main = \"Variable Importance\")\n```\n\n::: {.cell-output-display}\n![](tutorial_random-forest_files/figure-revealjs/var-imp-plot-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Conditional Permutation Importance (CPI) {.smaller background-color=\"#222222\"}\n\n- We can use that random forest to perform conditional permutation\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Implement conditional permutation\nhigh_thresh <- permimp::permimp(object = lich_rf, conditional = T,\n                                # Note the threshold is set to 0.95\n                               threshold = 0.95, do_check = F, progressBar = F)\n\n# Make CPI plot\nplot(high_thresh, type = \"box\", horizontal = T)\n```\n\n::: {.cell-output-display}\n![](tutorial_random-forest_files/figure-revealjs/cpi-1-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## CPI - Thresholds {.smaller background-color=\"#222222\"}\n\n- As you might imagine, the threshold you pick can have a dramatic effect!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Implement conditional permutation\nlow_thresh <- permimp::permimp(object = lich_rf, conditional = T,\n                               # Note the lower threshold\n                               threshold = 0.50, do_check = F, progressBar = F)\n\n# Make CPI plot\nplot(low_thresh, type = \"box\", horizontal = T)\n```\n\n::: {.cell-output-display}\n![](tutorial_random-forest_files/figure-revealjs/cpi-2-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Exploratory Plotting {.smaller background-color=\"#222222\"}\n\n- Let's graph the response against the four 'most important' variables\n    - This part is just for fun!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](tutorial_random-forest_files/figure-revealjs/explore-1.png){width=960}\n:::\n:::\n\n\n## [Thanks! Questions?]{.cream} {background-image=\"images_general/pic-question-mark-bfly.jpg\"}\n",
    "supporting": [
      "tutorial_random-forest_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}