---
title: "Random Forest in R"
author: "Nick J Lyon"
engine: knitr
title-slide-attributes:
  data-background-color: "#222222"
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [simple, slides_theme.scss]
    reference-location: document
---

## Under Construction {background-color="#222222"}

See original content [here](https://github.com/njlyon0/lyon-tutorial_random-forest)




## Prepare {.smaller background-color="#222222"}

- First, you'll need to install and load a few {{< fa brands r-project >}} R packages
    - While not technically necessary, the `librarian` package makes library management _much_ simpler

\

```{r libs}
#| echo: true

# Install librarian (if you need to)
# install.packages("librarian")

# Install (if not already present) and load needed libraries
librarian::shelf(tidyverse, randomForest, permimp, vegan)
```

## Data Prep {.smaller background-color="#222222"}





 Load some lichen species data
data(varespec)

 And some chemical predictor variables to go along with those species
data(varechem)

 Get just one of the lichen species to use as a response variable
varespec.v2 <- dplyr::select(varespec, Callvulg)

 Bind the response and predictors together
data.obj <- cbind(varechem, varespec.v2)

 Check it out
head(data.obj)

## Random Forest {.smaller background-color="#222222"}

 Run the random forest
rf1 <- randomForest(Callvulg ~ .,
                     The 'Y ~ .' format uses all other columns as predictors
                     Makes formatting your data **crucial**
                    data = data.obj,
                    ntree = 1000,
                     How many trees should be in the forest
                    mtry = 2,
                     mtry is  variables / node in tree
                    na.action = na.omit,
                    keep.forest = T,
                    keep.inbag = T)

## Variable Importance Plot {.smaller background-color="#222222"}


 Create a variable importance plot
randomForest::varImpPlot(x = rf1,
                         sort = T,
                         n.var = (ncol(data.obj) - 1),
                         main = "Variable Importance")

## Conditional Permutation Importance {.smaller background-color="#222222"}

- See `permimp` [vignette](cran.r-project.org/web/packages/permimp/vignettes/permimp-package.html) for more details
 

 Let's implement conditional permutation
   Should see a progress bar in the Console after you run the above
rf1.hiCond <- permimp::permimp(object = rf1,
                               conditional = T,
                               threshold = 0.95,
                               do_check = F)

## CPI Plot {.smaller background-color="#222222"}

 Plot distribution of importance
   Note this step may take a minute or two
plot(rf1.hiCond, type = "box", horizontal = T)


## CPI V2 {.smaller background-color="#222222"}

 Re-fit with a lower threshold
rf1.loCond <- permimp::permimp(object = rf1,
                               conditional = T,
                               threshold = 0.55,
                               do_check = F)

 Plot distribution of this importance
plot(rf1.loCond, type = "box", horizontal = T)

## CPI Comparison {.smaller background-color="#222222"}

 Make objects of the importance values
rf1.loCond.vals <- data.frame(rf1.loCond$values)
rf1.hiCond.vals <- data.frame(rf1.hiCond$values)

 Side by side comparison of ranking
   Ignore warning message
rownames(rf1.loCond.vals)[order(-rf1.loCond.vals)]
rownames(rf1.hiCond.vals)[order(-rf1.hiCond.vals)]

## Exploratory Plotting {.smaller background-color="#222222"}

- This part is just for fun!

\

```{r explore}

```

 Graph the top few metrics
ggplot(data.obj, aes(y = Callvulg, x = pH)) +
  geom_point(color = 'a6cee3') +
  geom_smooth(method = 'lm', color = 'black') +
  labs(x = "pH", y = "Callvulg Cover (%)") +
  pref_theme


ggplot(data.obj, aes(y = Callvulg, x = Al)) +
  geom_point(color = 'b2df8a') +
  geom_smooth(method = 'lm', color = 'black') +
  labs(x = "Aluminum", y = "Callvulg Cover (%)") +
  pref_theme


ggplot(data.obj, aes(y = Callvulg, x = P)) +
  geom_point(color = 'b2df8a') +
  geom_smooth(method = 'lm', color = 'black') +
  labs(x = "Phosphorous", y = "Callvulg Cover (%)") +
  pref_theme


ggplot(data.obj, aes(y = Callvulg, x = Baresoil)) +
  geom_point(color = '33a02c') +
  geom_smooth(method = 'lm', color = 'black') +
  labs(x = "Baresoil (%)", y = "Callvulg Cover (%)") +
  pref_theme
  
  